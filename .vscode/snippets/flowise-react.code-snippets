{
  "Flowise Custom Node Component": {
    "prefix": "flowise-node",
    "body": [
      "import { INode, INodeData, INodeParams } from 'flowise-components'",
      "",
      "class ${1:NodeName} implements INode {",
      "    label = '${2:Node Label}'",
      "    name = '${3:nodeName}'",
      "    version = 1.0",
      "    type = 'Custom'",
      "    icon = 'custom.svg'",
      "    category = '${4:Category}'",
      "    description = '${5:Node description}'",
      "    inputs: INodeParams[] = [",
      "        {",
      "            label: '${6:Input Label}',",
      "            name: '${7:inputName}',",
      "            type: 'string',",
      "            description: '${8:Input description}'",
      "        }",
      "    ]",
      "",
      "    async init(nodeData: INodeData): Promise<${9:ReturnType}> {",
      "        const ${7:inputName} = nodeData.inputs?.${7:inputName} as string",
      "        ",
      "        ${10:// Implementation}",
      "        ",
      "        return ${11:result}",
      "    }",
      "}",
      "",
      "module.exports = { nodeClass: ${1:NodeName} }"
    ],
    "description": "Create a Flowise custom node component"
  },
  "Flowise Chain Component": {
    "prefix": "flowise-chain",
    "body": [
      "import { INode, INodeData, INodeParams } from 'flowise-components'",
      "import { BaseChain } from 'langchain/chains'",
      "",
      "class ${1:ChainName} implements INode {",
      "    label = '${2:Chain Label}'",
      "    name = '${3:chainName}'",
      "    version = 1.0",
      "    type = 'Chain'",
      "    icon = 'chain.svg'",
      "    category = 'Chains'",
      "    description = '${4:Chain description}'",
      "    inputs: INodeParams[] = [",
      "        {",
      "            label: 'Language Model',",
      "            name: 'model',",
      "            type: 'BaseLanguageModel'",
      "        }",
      "    ]",
      "",
      "    async init(nodeData: INodeData): Promise<BaseChain> {",
      "        const model = nodeData.inputs?.model as BaseLanguageModel",
      "        ",
      "        ${5:// Chain implementation}",
      "        ",
      "        return chain",
      "    }",
      "}",
      "",
      "module.exports = { nodeClass: ${1:ChainName} }"
    ],
    "description": "Create a Flowise chain component"
  },
  "Flowise Tool Component": {
    "prefix": "flowise-tool",
    "body": [
      "import { INode, INodeData, INodeParams } from 'flowise-components'",
      "import { Tool } from 'langchain/tools'",
      "",
      "class ${1:ToolName}Tool extends Tool {",
      "    name = '${2:toolName}'",
      "    description = '${3:Tool description}'",
      "",
      "    async _call(input: string): Promise<string> {",
      "        ${4:// Tool implementation}",
      "        return result",
      "    }",
      "}",
      "",
      "class ${1:ToolName} implements INode {",
      "    label = '${5:Tool Label}'",
      "    name = '${2:toolName}'",
      "    version = 1.0",
      "    type = 'Tool'",
      "    icon = 'tool.svg'",
      "    category = 'Tools'",
      "    description = '${3:Tool description}'",
      "    inputs: INodeParams[] = []",
      "",
      "    async init(): Promise<${1:ToolName}Tool> {",
      "        return new ${1:ToolName}Tool()",
      "    }",
      "}",
      "",
      "module.exports = { nodeClass: ${1:ToolName} }"
    ],
    "description": "Create a Flowise tool component"
  }
}
